schema {
  query: RootQuery
  mutation: RootMutation
}

type RootMutation {
  CreateBucket(data: s3_CreateBucketInput!): s3_CreateBucketOutputResponse
  CreateMultipartUpload(data: s3_CreateMultipartUploadInput!): s3_CreateMultipartUploadOutputResponse
  DeleteBucket(data: s3_DeleteBucketInput!): s3_DeleteBucketOutputResponse
  DeleteBucketAnalyticsConfiguration(data: s3_DeleteBucketAnalyticsConfigurationInput!): s3_DeleteBucketAnalyticsConfigurationOutputResponse
  DeleteBucketCors(data: s3_DeleteBucketCorsInput!): s3_DeleteBucketCorsOutputResponse
  DeleteBucketEncryption(data: s3_DeleteBucketEncryptionInput!): s3_DeleteBucketEncryptionOutputResponse
  DeleteBucketInventoryConfiguration(data: s3_DeleteBucketInventoryConfigurationInput!): s3_DeleteBucketInventoryConfigurationOutputResponse
  DeleteBucketLifecycle(data: s3_DeleteBucketLifecycleInput!): s3_DeleteBucketLifecycleOutputResponse
  DeleteBucketMetricsConfiguration(data: s3_DeleteBucketMetricsConfigurationInput!): s3_DeleteBucketMetricsConfigurationOutputResponse
  DeleteBucketPolicy(data: s3_DeleteBucketPolicyInput!): s3_DeleteBucketPolicyOutputResponse
  DeleteBucketReplication(data: s3_DeleteBucketReplicationInput!): s3_DeleteBucketReplicationOutputResponse
  DeleteBucketTagging(data: s3_DeleteBucketTaggingInput!): s3_DeleteBucketTaggingOutputResponse
  DeleteBucketWebsite(data: s3_DeleteBucketWebsiteInput!): s3_DeleteBucketWebsiteOutputResponse
  DeleteObject(data: s3_DeleteObjectInput!): s3_DeleteObjectOutputResponse
  DeleteObjectTagging(data: s3_DeleteObjectTaggingInput!): s3_DeleteObjectTaggingOutputResponse
  DeleteObjects(data: s3_DeleteObjectsInput!): s3_DeleteObjectsOutputResponse
  DeletePublicAccessBlock(data: s3_DeletePublicAccessBlockInput!): s3_DeletePublicAccessBlockOutputResponse
  PutBucketAccelerateConfiguration(data: s3_PutBucketAccelerateConfigurationInput!): s3_PutBucketAccelerateConfigurationOutputResponse
  PutBucketAcl(data: s3_PutBucketAclInput!): s3_PutBucketAclOutputResponse
  PutBucketAnalyticsConfiguration(data: s3_PutBucketAnalyticsConfigurationInput!): s3_PutBucketAnalyticsConfigurationOutputResponse
  PutBucketCors(data: s3_PutBucketCorsInput!): s3_PutBucketCorsOutputResponse
  PutBucketEncryption(data: s3_PutBucketEncryptionInput!): s3_PutBucketEncryptionOutputResponse
  PutBucketInventoryConfiguration(data: s3_PutBucketInventoryConfigurationInput!): s3_PutBucketInventoryConfigurationOutputResponse
  PutBucketLifecycle(data: s3_PutBucketLifecycleInput!): s3_PutBucketLifecycleOutputResponse
  PutBucketLifecycleConfiguration(data: s3_PutBucketLifecycleConfigurationInput!): s3_PutBucketLifecycleConfigurationOutputResponse
  PutBucketLogging(data: s3_PutBucketLoggingInput!): s3_PutBucketLoggingOutputResponse
  PutBucketMetricsConfiguration(data: s3_PutBucketMetricsConfigurationInput!): s3_PutBucketMetricsConfigurationOutputResponse
  PutBucketNotification(data: s3_PutBucketNotificationInput!): s3_PutBucketNotificationOutputResponse
  PutBucketNotificationConfiguration(data: s3_PutBucketNotificationConfigurationInput!): s3_PutBucketNotificationConfigurationOutputResponse
  PutBucketPolicy(data: s3_PutBucketPolicyInput!): s3_PutBucketPolicyOutputResponse
  PutBucketReplication(data: s3_PutBucketReplicationInput!): s3_PutBucketReplicationOutputResponse
  PutBucketRequestPayment(data: s3_PutBucketRequestPaymentInput!): s3_PutBucketRequestPaymentOutputResponse
  PutBucketTagging(data: s3_PutBucketTaggingInput!): s3_PutBucketTaggingOutputResponse
  PutBucketVersioning(data: s3_PutBucketVersioningInput!): s3_PutBucketVersioningOutputResponse
  PutBucketWebsite(data: s3_PutBucketWebsiteInput!): s3_PutBucketWebsiteOutputResponse
  PutObject(data: s3_PutObjectInput!): s3_PutObjectOutputResponse
  PutObjectAcl(data: s3_PutObjectAclInput!): s3_PutObjectAclOutputResponse
  PutObjectLegalHold(data: s3_PutObjectLegalHoldInput!): s3_PutObjectLegalHoldOutputResponse
  PutObjectLockConfiguration(data: s3_PutObjectLockConfigurationInput!): s3_PutObjectLockConfigurationOutputResponse
  PutObjectRetention(data: s3_PutObjectRetentionInput!): s3_PutObjectRetentionOutputResponse
  PutObjectTagging(data: s3_PutObjectTaggingInput!): s3_PutObjectTaggingOutputResponse
  PutPublicAccessBlock(data: s3_PutPublicAccessBlockInput!): s3_PutPublicAccessBlockOutputResponse
}

type RootQuery {
  ListBucketAnalyticsConfigurations(data: s3_ListBucketAnalyticsConfigurationsInput!): s3_ListBucketAnalyticsConfigurationsOutputResponse
  ListBucketInventoryConfigurations(data: s3_ListBucketInventoryConfigurationsInput!): s3_ListBucketInventoryConfigurationsOutputResponse
  ListBucketMetricsConfigurations(data: s3_ListBucketMetricsConfigurationsInput!): s3_ListBucketMetricsConfigurationsOutputResponse
  ListBuckets(data: s3_ListBucketsInput!): s3_ListBucketsOutputResponse
  ListMultipartUploads(data: s3_ListMultipartUploadsInput!): s3_ListMultipartUploadsOutputResponse
  ListMultipartUploadsPages(data: s3_ListMultipartUploadsInput!): Boolean
  ListObjectVersions(data: s3_ListObjectVersionsInput!): s3_ListObjectVersionsOutputResponse
  ListObjectVersionsPages(data: s3_ListObjectVersionsInput!): Boolean
  ListObjects(data: s3_ListObjectsInput!): s3_ListObjectsOutputResponse
  ListObjectsPages(data: s3_ListObjectsInput!): Boolean
  ListObjectsV2(data: s3_ListObjectsV2Input!): s3_ListObjectsV2OutputResponse
  ListObjectsV2Pages(data: s3_ListObjectsV2Input!): Boolean
  ListParts(data: s3_ListPartsInput!): s3_ListPartsOutputResponse
  ListPartsPages(data: s3_ListPartsInput!): Boolean
}

input s3_AbortIncompleteMultipartUploadInput {
  DaysAfterInitiation: Int
}

input s3_AccelerateConfigurationInput {
  Status: String
}

input s3_AccessControlPolicyInput {
  Owner: s3_OwnerInput
  Grants: [s3_GrantInput]
}

input s3_AccessControlTranslationInput {
  Owner: String!
}

type s3_AnalyticsAndOperator {
  Prefix: String
  Tags: [s3_Tag]
}

input s3_AnalyticsAndOperatorInput {
  Prefix: String
  Tags: [s3_TagInput]
}

type s3_AnalyticsConfiguration {
  Filter: s3_AnalyticsFilter
  Id: String!
  StorageClassAnalysis: s3_StorageClassAnalysis!
}

input s3_AnalyticsConfigurationInput {
  Filter: s3_AnalyticsFilterInput
  Id: String!
  StorageClassAnalysis: s3_StorageClassAnalysisInput!
}

type s3_AnalyticsExportDestination {
  S3BucketDestination: s3_AnalyticsS3BucketDestination!
}

input s3_AnalyticsExportDestinationInput {
  S3BucketDestination: s3_AnalyticsS3BucketDestinationInput!
}

type s3_AnalyticsFilter {
  And: s3_AnalyticsAndOperator
  Prefix: String
  Tag: s3_Tag
}

input s3_AnalyticsFilterInput {
  And: s3_AnalyticsAndOperatorInput
  Prefix: String
  Tag: s3_TagInput
}

type s3_AnalyticsS3BucketDestination {
  Bucket: String!
  BucketAccountId: String
  Format: String!
  Prefix: String
}

input s3_AnalyticsS3BucketDestinationInput {
  Format: String!
  Prefix: String
  Bucket: String!
  BucketAccountId: String
}

type s3_Bucket {
  CreationDate: time_Time
  Name: String
}

input s3_BucketLifecycleConfigurationInput {
  Rules: [s3_LifecycleRuleInput]!
}

input s3_BucketLoggingStatusInput {
  LoggingEnabled: s3_LoggingEnabledInput
}

input s3_CloudFunctionConfigurationInput {
  Events: [String]
  Id: String
  InvocationRole: String
  CloudFunction: String
  Event: String
}

type s3_CommonPrefix {
  Prefix: String
}

input s3_ConditionInput {
  HttpErrorCodeReturnedEquals: String
  KeyPrefixEquals: String
}

input s3_CORSConfigurationInput {
  CORSRules: [s3_CORSRuleInput]!
}

input s3_CORSRuleInput {
  ExposeHeaders: [String]
  MaxAgeSeconds: Int
  AllowedHeaders: [String]
  AllowedMethods: [String]!
  AllowedOrigins: [String]!
}

input s3_CreateBucketConfigurationInput {
  LocationConstraint: String
}

input s3_CreateBucketInput {
  CreateBucketConfiguration: s3_CreateBucketConfigurationInput
  GrantReadACP: String
  GrantRead: String
  ObjectLockEnabledForBucket: Boolean
  GrantWrite: String
  GrantFullControl: String
  Bucket: String!
  GrantWriteACP: String
  ACL: String
}

type s3_CreateBucketOutput {
  Location: String
}

type s3_CreateBucketOutputResponse {
  s3_CreateBucketOutput: s3_CreateBucketOutput!
}

input s3_CreateMultipartUploadInput {
  CacheControl: String
  SSEKMSKeyId: String
  StorageClass: String
  ObjectLockLegalHoldStatus: String
  ObjectLockMode: String
  RequestPayer: String
  Key: String!
  GrantFullControl: String
  Expires: time_TimeInput
  GrantRead: String
  ACL: String
  Tagging: String
  GrantWriteACP: String
  Metadata: String
  SSECustomerKey: String
  ContentType: String
  SSECustomerKeyMD5: String
  ContentDisposition: String
  ObjectLockRetainUntilDate: time_TimeInput
  Bucket: String!
  ContentLanguage: String
  SSECustomerAlgorithm: String
  ServerSideEncryption: String
  WebsiteRedirectLocation: String
  GrantReadACP: String
  ContentEncoding: String
}

type s3_CreateMultipartUploadOutput {
  AbortDate: time_Time
  AbortRuleId: String
  Bucket: String
  Key: String
  RequestCharged: String
  SSECustomerAlgorithm: String
  SSECustomerKeyMD5: String
  SSEKMSKeyId: String
  ServerSideEncryption: String
  UploadId: String
}

type s3_CreateMultipartUploadOutputResponse {
  s3_CreateMultipartUploadOutput: s3_CreateMultipartUploadOutput!
}

input s3_DefaultRetentionInput {
  Days: Int
  Mode: String
  Years: Int
}

input s3_DeleteBucketAnalyticsConfigurationInput {
  Bucket: String!
  Id: String!
}

type s3_DeleteBucketAnalyticsConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketAnalyticsConfigurationOutputResponse {
  s3_DeleteBucketAnalyticsConfigurationOutput: s3_DeleteBucketAnalyticsConfigurationOutput!
}

input s3_DeleteBucketCorsInput {
  Bucket: String!
}

type s3_DeleteBucketCorsOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketCorsOutputResponse {
  s3_DeleteBucketCorsOutput: s3_DeleteBucketCorsOutput!
}

input s3_DeleteBucketEncryptionInput {
  Bucket: String!
}

type s3_DeleteBucketEncryptionOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketEncryptionOutputResponse {
  s3_DeleteBucketEncryptionOutput: s3_DeleteBucketEncryptionOutput!
}

input s3_DeleteBucketInput {
  Bucket: String!
}

input s3_DeleteBucketInventoryConfigurationInput {
  Id: String!
  Bucket: String!
}

type s3_DeleteBucketInventoryConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketInventoryConfigurationOutputResponse {
  s3_DeleteBucketInventoryConfigurationOutput: s3_DeleteBucketInventoryConfigurationOutput!
}

input s3_DeleteBucketLifecycleInput {
  Bucket: String!
}

type s3_DeleteBucketLifecycleOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketLifecycleOutputResponse {
  s3_DeleteBucketLifecycleOutput: s3_DeleteBucketLifecycleOutput!
}

input s3_DeleteBucketMetricsConfigurationInput {
  Bucket: String!
  Id: String!
}

type s3_DeleteBucketMetricsConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketMetricsConfigurationOutputResponse {
  s3_DeleteBucketMetricsConfigurationOutput: s3_DeleteBucketMetricsConfigurationOutput!
}

type s3_DeleteBucketOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketOutputResponse {
  s3_DeleteBucketOutput: s3_DeleteBucketOutput!
}

input s3_DeleteBucketPolicyInput {
  Bucket: String!
}

type s3_DeleteBucketPolicyOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketPolicyOutputResponse {
  s3_DeleteBucketPolicyOutput: s3_DeleteBucketPolicyOutput!
}

input s3_DeleteBucketReplicationInput {
  Bucket: String!
}

type s3_DeleteBucketReplicationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketReplicationOutputResponse {
  s3_DeleteBucketReplicationOutput: s3_DeleteBucketReplicationOutput!
}

input s3_DeleteBucketTaggingInput {
  Bucket: String!
}

type s3_DeleteBucketTaggingOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketTaggingOutputResponse {
  s3_DeleteBucketTaggingOutput: s3_DeleteBucketTaggingOutput!
}

input s3_DeleteBucketWebsiteInput {
  Bucket: String!
}

type s3_DeleteBucketWebsiteOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeleteBucketWebsiteOutputResponse {
  s3_DeleteBucketWebsiteOutput: s3_DeleteBucketWebsiteOutput!
}

type s3_DeletedObject {
  DeleteMarker: Boolean
  DeleteMarkerVersionId: String
  Key: String
  VersionId: String
}

input s3_DeleteInput {
  Objects: [s3_ObjectIdentifierInput]!
  Quiet: Boolean
}

type s3_DeleteMarkerEntry {
  IsLatest: Boolean
  Key: String
  LastModified: time_Time
  Owner: s3_Owner
  VersionId: String
}

input s3_DeleteMarkerReplicationInput {
  Status: String
}

input s3_DeleteObjectInput {
  VersionId: String
  Bucket: String!
  BypassGovernanceRetention: Boolean
  Key: String!
  MFA: String
  RequestPayer: String
}

type s3_DeleteObjectOutput {
  DeleteMarker: Boolean
  RequestCharged: String
  VersionId: String
}

type s3_DeleteObjectOutputResponse {
  s3_DeleteObjectOutput: s3_DeleteObjectOutput!
}

input s3_DeleteObjectsInput {
  MFA: String
  RequestPayer: String
  Bucket: String!
  BypassGovernanceRetention: Boolean
  Delete: s3_DeleteInput!
}

type s3_DeleteObjectsOutput {
  Deleted: [s3_DeletedObject]
  Errors: [s3_Error]
  RequestCharged: String
}

type s3_DeleteObjectsOutputResponse {
  s3_DeleteObjectsOutput: s3_DeleteObjectsOutput!
}

input s3_DeleteObjectTaggingInput {
  Bucket: String!
  Key: String!
  VersionId: String
}

type s3_DeleteObjectTaggingOutput {
  VersionId: String
}

type s3_DeleteObjectTaggingOutputResponse {
  s3_DeleteObjectTaggingOutput: s3_DeleteObjectTaggingOutput!
}

input s3_DeletePublicAccessBlockInput {
  Bucket: String!
}

type s3_DeletePublicAccessBlockOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_DeletePublicAccessBlockOutputResponse {
  s3_DeletePublicAccessBlockOutput: s3_DeletePublicAccessBlockOutput!
}

input s3_DestinationInput {
  AccessControlTranslation: s3_AccessControlTranslationInput
  Account: String
  Bucket: String!
  EncryptionConfiguration: s3_EncryptionConfigurationInput
  StorageClass: String
}

input s3_EncryptionConfigurationInput {
  ReplicaKmsKeyID: String
}

type s3_Error {
  Code: String
  Key: String
  Message: String
  VersionId: String
}

input s3_ErrorDocumentInput {
  Key: String!
}

input s3_FilterRuleInput {
  Value: String
  Name: String
}

input s3_GranteeInput {
  DisplayName: String
  EmailAddress: String
  ID: String
  Type: String!
  URI: String
}

input s3_GrantInput {
  Grantee: s3_GranteeInput
  Permission: String
}

input s3_IndexDocumentInput {
  Suffix: String!
}

type s3_Initiator {
  DisplayName: String
  ID: String
}

type s3_InventoryConfiguration {
  Destination: s3_InventoryDestination!
  Filter: s3_InventoryFilter
  Id: String!
  IncludedObjectVersions: String!
  IsEnabled: Boolean!
  OptionalFields: [String]
  Schedule: s3_InventorySchedule!
}

input s3_InventoryConfigurationInput {
  Schedule: s3_InventoryScheduleInput!
  Destination: s3_InventoryDestinationInput!
  Filter: s3_InventoryFilterInput
  Id: String!
  IncludedObjectVersions: String!
  IsEnabled: Boolean!
  OptionalFields: [String]
}

type s3_InventoryDestination {
  S3BucketDestination: s3_InventoryS3BucketDestination!
}

input s3_InventoryDestinationInput {
  S3BucketDestination: s3_InventoryS3BucketDestinationInput!
}

type s3_InventoryEncryption {
  SSEKMS: s3_SSEKMS
  SSES3: s3_SSES3
}

input s3_InventoryEncryptionInput {
  SSEKMS: s3_SSEKMSInput
  SSES3: s3_SSES3Input
}

type s3_InventoryFilter {
  Prefix: String!
}

input s3_InventoryFilterInput {
  Prefix: String!
}

type s3_InventoryS3BucketDestination {
  AccountId: String
  Bucket: String!
  Encryption: s3_InventoryEncryption
  Format: String!
  Prefix: String
}

input s3_InventoryS3BucketDestinationInput {
  AccountId: String
  Bucket: String!
  Encryption: s3_InventoryEncryptionInput
  Format: String!
  Prefix: String
}

type s3_InventorySchedule {
  Frequency: String!
}

input s3_InventoryScheduleInput {
  Frequency: String!
}

input s3_KeyFilterInput {
  FilterRules: [s3_FilterRuleInput]
}

input s3_LambdaFunctionConfigurationInput {
  Filter: s3_NotificationConfigurationFilterInput
  Id: String
  LambdaFunctionArn: String!
  Events: [String]!
}

input s3_LifecycleConfigurationInput {
  Rules: [s3_RuleInput]!
}

input s3_LifecycleExpirationInput {
  Date: time_TimeInput
  Days: Int
  ExpiredObjectDeleteMarker: Boolean
}

input s3_LifecycleRuleAndOperatorInput {
  Prefix: String
  Tags: [s3_TagInput]
}

input s3_LifecycleRuleFilterInput {
  Prefix: String
  Tag: s3_TagInput
  And: s3_LifecycleRuleAndOperatorInput
}

input s3_LifecycleRuleInput {
  Expiration: s3_LifecycleExpirationInput
  Prefix: String
  ID: String
  AbortIncompleteMultipartUpload: s3_AbortIncompleteMultipartUploadInput
  NoncurrentVersionExpiration: s3_NoncurrentVersionExpirationInput
  Status: String!
  Transitions: [s3_TransitionInput]
  NoncurrentVersionTransitions: [s3_NoncurrentVersionTransitionInput]
  Filter: s3_LifecycleRuleFilterInput
}

input s3_ListBucketAnalyticsConfigurationsInput {
  Bucket: String!
  ContinuationToken: String
}

type s3_ListBucketAnalyticsConfigurationsOutput {
  AnalyticsConfigurationList: [s3_AnalyticsConfiguration]
  ContinuationToken: String
  IsTruncated: Boolean
  NextContinuationToken: String
}

type s3_ListBucketAnalyticsConfigurationsOutputResponse {
  s3_ListBucketAnalyticsConfigurationsOutput: s3_ListBucketAnalyticsConfigurationsOutput!
}

input s3_ListBucketInventoryConfigurationsInput {
  Bucket: String!
  ContinuationToken: String
}

type s3_ListBucketInventoryConfigurationsOutput {
  ContinuationToken: String
  InventoryConfigurationList: [s3_InventoryConfiguration]
  IsTruncated: Boolean
  NextContinuationToken: String
}

type s3_ListBucketInventoryConfigurationsOutputResponse {
  s3_ListBucketInventoryConfigurationsOutput: s3_ListBucketInventoryConfigurationsOutput!
}

input s3_ListBucketMetricsConfigurationsInput {
  ContinuationToken: String
  Bucket: String!
}

type s3_ListBucketMetricsConfigurationsOutput {
  ContinuationToken: String
  IsTruncated: Boolean
  MetricsConfigurationList: [s3_MetricsConfiguration]
  NextContinuationToken: String
}

type s3_ListBucketMetricsConfigurationsOutputResponse {
  s3_ListBucketMetricsConfigurationsOutput: s3_ListBucketMetricsConfigurationsOutput!
}

input s3_ListBucketsInput {
  """Empty Response"""
  Empty: Boolean
}

type s3_ListBucketsOutput {
  Buckets: [s3_Bucket]
  Owner: s3_Owner
}

type s3_ListBucketsOutputResponse {
  s3_ListBucketsOutput: s3_ListBucketsOutput!
}

input s3_ListMultipartUploadsInput {
  KeyMarker: String
  MaxUploads: Int
  Prefix: String
  UploadIdMarker: String
  Bucket: String!
  Delimiter: String
  EncodingType: String
}

type s3_ListMultipartUploadsOutput {
  Bucket: String
  CommonPrefixes: [s3_CommonPrefix]
  Delimiter: String
  EncodingType: String
  IsTruncated: Boolean
  KeyMarker: String
  MaxUploads: Int
  NextKeyMarker: String
  NextUploadIdMarker: String
  Prefix: String
  UploadIdMarker: String
  Uploads: [s3_MultipartUpload]
}

type s3_ListMultipartUploadsOutputResponse {
  s3_ListMultipartUploadsOutput: s3_ListMultipartUploadsOutput!
}

input s3_ListObjectsInput {
  EncodingType: String
  Marker: String
  MaxKeys: Int
  Prefix: String
  RequestPayer: String
  Bucket: String!
  Delimiter: String
}

type s3_ListObjectsOutput {
  CommonPrefixes: [s3_CommonPrefix]
  Contents: [s3_Object]
  Delimiter: String
  EncodingType: String
  IsTruncated: Boolean
  Marker: String
  MaxKeys: Int
  Name: String
  NextMarker: String
  Prefix: String
}

type s3_ListObjectsOutputResponse {
  s3_ListObjectsOutput: s3_ListObjectsOutput!
}

input s3_ListObjectsV2Input {
  StartAfter: String
  ContinuationToken: String
  EncodingType: String
  MaxKeys: Int
  RequestPayer: String
  Bucket: String!
  FetchOwner: Boolean
  Prefix: String
  Delimiter: String
}

type s3_ListObjectsV2Output {
  CommonPrefixes: [s3_CommonPrefix]
  Contents: [s3_Object]
  ContinuationToken: String
  Delimiter: String
  EncodingType: String
  IsTruncated: Boolean
  KeyCount: Int
  MaxKeys: Int
  Name: String
  NextContinuationToken: String
  Prefix: String
  StartAfter: String
}

type s3_ListObjectsV2OutputResponse {
  s3_ListObjectsV2Output: s3_ListObjectsV2Output!
}

input s3_ListObjectVersionsInput {
  Prefix: String
  VersionIdMarker: String
  Bucket: String!
  Delimiter: String
  EncodingType: String
  KeyMarker: String
  MaxKeys: Int
}

type s3_ListObjectVersionsOutput {
  CommonPrefixes: [s3_CommonPrefix]
  DeleteMarkers: [s3_DeleteMarkerEntry]
  Delimiter: String
  EncodingType: String
  IsTruncated: Boolean
  KeyMarker: String
  MaxKeys: Int
  Name: String
  NextKeyMarker: String
  NextVersionIdMarker: String
  Prefix: String
  VersionIdMarker: String
  Versions: [s3_ObjectVersion]
}

type s3_ListObjectVersionsOutputResponse {
  s3_ListObjectVersionsOutput: s3_ListObjectVersionsOutput!
}

input s3_ListPartsInput {
  PartNumberMarker: Int
  RequestPayer: String
  UploadId: String!
  Bucket: String!
  Key: String!
  MaxParts: Int
}

type s3_ListPartsOutput {
  AbortDate: time_Time
  AbortRuleId: String
  Bucket: String
  Initiator: s3_Initiator
  IsTruncated: Boolean
  Key: String
  MaxParts: Int
  NextPartNumberMarker: Int
  Owner: s3_Owner
  PartNumberMarker: Int
  Parts: [s3_Part]
  RequestCharged: String
  StorageClass: String
  UploadId: String
}

type s3_ListPartsOutputResponse {
  s3_ListPartsOutput: s3_ListPartsOutput!
}

input s3_LoggingEnabledInput {
  TargetGrants: [s3_TargetGrantInput]
  TargetPrefix: String!
  TargetBucket: String!
}

type s3_MetricsAndOperator {
  Prefix: String
  Tags: [s3_Tag]
}

input s3_MetricsAndOperatorInput {
  Prefix: String
  Tags: [s3_TagInput]
}

type s3_MetricsConfiguration {
  Filter: s3_MetricsFilter
  Id: String!
}

input s3_MetricsConfigurationInput {
  Filter: s3_MetricsFilterInput
  Id: String!
}

type s3_MetricsFilter {
  And: s3_MetricsAndOperator
  Prefix: String
  Tag: s3_Tag
}

input s3_MetricsFilterInput {
  Tag: s3_TagInput
  And: s3_MetricsAndOperatorInput
  Prefix: String
}

type s3_MultipartUpload {
  Initiated: time_Time
  Initiator: s3_Initiator
  Key: String
  Owner: s3_Owner
  StorageClass: String
  UploadId: String
}

input s3_NoncurrentVersionExpirationInput {
  NoncurrentDays: Int
}

input s3_NoncurrentVersionTransitionInput {
  NoncurrentDays: Int
  StorageClass: String
}

input s3_NotificationConfigurationDeprecatedInput {
  CloudFunctionConfiguration: s3_CloudFunctionConfigurationInput
  QueueConfiguration: s3_QueueConfigurationDeprecatedInput
  TopicConfiguration: s3_TopicConfigurationDeprecatedInput
}

input s3_NotificationConfigurationFilterInput {
  Key: s3_KeyFilterInput
}

input s3_NotificationConfigurationInput {
  QueueConfigurations: [s3_QueueConfigurationInput]
  TopicConfigurations: [s3_TopicConfigurationInput]
  LambdaFunctionConfigurations: [s3_LambdaFunctionConfigurationInput]
}

type s3_Object {
  ETag: String
  Key: String
  LastModified: time_Time
  Owner: s3_Owner
  Size: Int
  StorageClass: String
}

input s3_ObjectIdentifierInput {
  Key: String!
  VersionId: String
}

input s3_ObjectLockConfigurationInput {
  ObjectLockEnabled: String
  Rule: s3_ObjectLockRuleInput
}

input s3_ObjectLockLegalHoldInput {
  Status: String
}

input s3_ObjectLockRetentionInput {
  Mode: String
  RetainUntilDate: time_TimeInput
}

input s3_ObjectLockRuleInput {
  DefaultRetention: s3_DefaultRetentionInput
}

type s3_ObjectVersion {
  ETag: String
  IsLatest: Boolean
  Key: String
  LastModified: time_Time
  Owner: s3_Owner
  Size: Int
  StorageClass: String
  VersionId: String
}

type s3_Owner {
  DisplayName: String
  ID: String
}

input s3_OwnerInput {
  DisplayName: String
  ID: String
}

type s3_Part {
  ETag: String
  LastModified: time_Time
  PartNumber: Int
  Size: Int
}

input s3_PublicAccessBlockConfigurationInput {
  BlockPublicAcls: Boolean
  BlockPublicPolicy: Boolean
  IgnorePublicAcls: Boolean
  RestrictPublicBuckets: Boolean
}

input s3_PutBucketAccelerateConfigurationInput {
  Bucket: String!
  AccelerateConfiguration: s3_AccelerateConfigurationInput!
}

type s3_PutBucketAccelerateConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketAccelerateConfigurationOutputResponse {
  s3_PutBucketAccelerateConfigurationOutput: s3_PutBucketAccelerateConfigurationOutput!
}

input s3_PutBucketAclInput {
  Bucket: String!
  GrantFullControl: String
  GrantRead: String
  GrantReadACP: String
  GrantWrite: String
  GrantWriteACP: String
  ACL: String
  AccessControlPolicy: s3_AccessControlPolicyInput
}

type s3_PutBucketAclOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketAclOutputResponse {
  s3_PutBucketAclOutput: s3_PutBucketAclOutput!
}

input s3_PutBucketAnalyticsConfigurationInput {
  Bucket: String!
  Id: String!
  AnalyticsConfiguration: s3_AnalyticsConfigurationInput!
}

type s3_PutBucketAnalyticsConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketAnalyticsConfigurationOutputResponse {
  s3_PutBucketAnalyticsConfigurationOutput: s3_PutBucketAnalyticsConfigurationOutput!
}

input s3_PutBucketCorsInput {
  Bucket: String!
  CORSConfiguration: s3_CORSConfigurationInput!
}

type s3_PutBucketCorsOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketCorsOutputResponse {
  s3_PutBucketCorsOutput: s3_PutBucketCorsOutput!
}

input s3_PutBucketEncryptionInput {
  Bucket: String!
  ServerSideEncryptionConfiguration: s3_ServerSideEncryptionConfigurationInput!
}

type s3_PutBucketEncryptionOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketEncryptionOutputResponse {
  s3_PutBucketEncryptionOutput: s3_PutBucketEncryptionOutput!
}

input s3_PutBucketInventoryConfigurationInput {
  Bucket: String!
  Id: String!
  InventoryConfiguration: s3_InventoryConfigurationInput!
}

type s3_PutBucketInventoryConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketInventoryConfigurationOutputResponse {
  s3_PutBucketInventoryConfigurationOutput: s3_PutBucketInventoryConfigurationOutput!
}

input s3_PutBucketLifecycleConfigurationInput {
  Bucket: String!
  LifecycleConfiguration: s3_BucketLifecycleConfigurationInput
}

type s3_PutBucketLifecycleConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketLifecycleConfigurationOutputResponse {
  s3_PutBucketLifecycleConfigurationOutput: s3_PutBucketLifecycleConfigurationOutput!
}

input s3_PutBucketLifecycleInput {
  LifecycleConfiguration: s3_LifecycleConfigurationInput
  Bucket: String!
}

type s3_PutBucketLifecycleOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketLifecycleOutputResponse {
  s3_PutBucketLifecycleOutput: s3_PutBucketLifecycleOutput!
}

input s3_PutBucketLoggingInput {
  Bucket: String!
  BucketLoggingStatus: s3_BucketLoggingStatusInput!
}

type s3_PutBucketLoggingOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketLoggingOutputResponse {
  s3_PutBucketLoggingOutput: s3_PutBucketLoggingOutput!
}

input s3_PutBucketMetricsConfigurationInput {
  Bucket: String!
  Id: String!
  MetricsConfiguration: s3_MetricsConfigurationInput!
}

type s3_PutBucketMetricsConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketMetricsConfigurationOutputResponse {
  s3_PutBucketMetricsConfigurationOutput: s3_PutBucketMetricsConfigurationOutput!
}

input s3_PutBucketNotificationConfigurationInput {
  NotificationConfiguration: s3_NotificationConfigurationInput!
  Bucket: String!
}

type s3_PutBucketNotificationConfigurationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketNotificationConfigurationOutputResponse {
  s3_PutBucketNotificationConfigurationOutput: s3_PutBucketNotificationConfigurationOutput!
}

input s3_PutBucketNotificationInput {
  NotificationConfiguration: s3_NotificationConfigurationDeprecatedInput!
  Bucket: String!
}

type s3_PutBucketNotificationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketNotificationOutputResponse {
  s3_PutBucketNotificationOutput: s3_PutBucketNotificationOutput!
}

input s3_PutBucketPolicyInput {
  Policy: String!
  Bucket: String!
  ConfirmRemoveSelfBucketAccess: Boolean
}

type s3_PutBucketPolicyOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketPolicyOutputResponse {
  s3_PutBucketPolicyOutput: s3_PutBucketPolicyOutput!
}

input s3_PutBucketReplicationInput {
  Bucket: String!
  ReplicationConfiguration: s3_ReplicationConfigurationInput!
}

type s3_PutBucketReplicationOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketReplicationOutputResponse {
  s3_PutBucketReplicationOutput: s3_PutBucketReplicationOutput!
}

input s3_PutBucketRequestPaymentInput {
  Bucket: String!
  RequestPaymentConfiguration: s3_RequestPaymentConfigurationInput!
}

type s3_PutBucketRequestPaymentOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketRequestPaymentOutputResponse {
  s3_PutBucketRequestPaymentOutput: s3_PutBucketRequestPaymentOutput!
}

input s3_PutBucketTaggingInput {
  Tagging: s3_TaggingInput!
  Bucket: String!
}

type s3_PutBucketTaggingOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketTaggingOutputResponse {
  s3_PutBucketTaggingOutput: s3_PutBucketTaggingOutput!
}

input s3_PutBucketVersioningInput {
  Bucket: String!
  MFA: String
  VersioningConfiguration: s3_VersioningConfigurationInput!
}

type s3_PutBucketVersioningOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketVersioningOutputResponse {
  s3_PutBucketVersioningOutput: s3_PutBucketVersioningOutput!
}

input s3_PutBucketWebsiteInput {
  Bucket: String!
  WebsiteConfiguration: s3_WebsiteConfigurationInput!
}

type s3_PutBucketWebsiteOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutBucketWebsiteOutputResponse {
  s3_PutBucketWebsiteOutput: s3_PutBucketWebsiteOutput!
}

input s3_PutObjectAclInput {
  Bucket: String!
  GrantFullControl: String
  GrantWrite: String
  AccessControlPolicy: s3_AccessControlPolicyInput
  Key: String!
  RequestPayer: String
  VersionId: String
  ACL: String
  GrantReadACP: String
  GrantWriteACP: String
  GrantRead: String
}

type s3_PutObjectAclOutput {
  RequestCharged: String
}

type s3_PutObjectAclOutputResponse {
  s3_PutObjectAclOutput: s3_PutObjectAclOutput!
}

input s3_PutObjectInput {
  ObjectLockRetainUntilDate: time_TimeInput
  RequestPayer: String
  SSECustomerKeyMD5: String
  ContentLength: Int
  GrantRead: String
  Bucket: String!
  Key: String!
  ObjectLockMode: String
  WebsiteRedirectLocation: String
  ACL: String
  ContentDisposition: String
  Body: String
  Expires: time_TimeInput
  GrantFullControl: String
  SSECustomerAlgorithm: String
  Tagging: String
  ServerSideEncryption: String
  Metadata: String
  ContentMD5: String
  StorageClass: String
  ContentEncoding: String
  GrantWriteACP: String
  ContentType: String
  SSECustomerKey: String
  GrantReadACP: String
  CacheControl: String
  ContentLanguage: String
  SSEKMSKeyId: String
  ObjectLockLegalHoldStatus: String
}

input s3_PutObjectLegalHoldInput {
  Bucket: String!
  Key: String!
  LegalHold: s3_ObjectLockLegalHoldInput
  RequestPayer: String
  VersionId: String
}

type s3_PutObjectLegalHoldOutput {
  RequestCharged: String
}

type s3_PutObjectLegalHoldOutputResponse {
  s3_PutObjectLegalHoldOutput: s3_PutObjectLegalHoldOutput!
}

input s3_PutObjectLockConfigurationInput {
  Bucket: String!
  ObjectLockConfiguration: s3_ObjectLockConfigurationInput
  RequestPayer: String
  Token: String
}

type s3_PutObjectLockConfigurationOutput {
  RequestCharged: String
}

type s3_PutObjectLockConfigurationOutputResponse {
  s3_PutObjectLockConfigurationOutput: s3_PutObjectLockConfigurationOutput!
}

type s3_PutObjectOutput {
  ETag: String
  Expiration: String
  RequestCharged: String
  SSECustomerAlgorithm: String
  SSECustomerKeyMD5: String
  SSEKMSKeyId: String
  ServerSideEncryption: String
  VersionId: String
}

type s3_PutObjectOutputResponse {
  s3_PutObjectOutput: s3_PutObjectOutput!
}

input s3_PutObjectRetentionInput {
  RequestPayer: String
  Retention: s3_ObjectLockRetentionInput
  VersionId: String
  Bucket: String!
  BypassGovernanceRetention: Boolean
  Key: String!
}

type s3_PutObjectRetentionOutput {
  RequestCharged: String
}

type s3_PutObjectRetentionOutputResponse {
  s3_PutObjectRetentionOutput: s3_PutObjectRetentionOutput!
}

input s3_PutObjectTaggingInput {
  Tagging: s3_TaggingInput!
  VersionId: String
  Bucket: String!
  Key: String!
}

type s3_PutObjectTaggingOutput {
  VersionId: String
}

type s3_PutObjectTaggingOutputResponse {
  s3_PutObjectTaggingOutput: s3_PutObjectTaggingOutput!
}

input s3_PutPublicAccessBlockInput {
  Bucket: String!
  PublicAccessBlockConfiguration: s3_PublicAccessBlockConfigurationInput!
}

type s3_PutPublicAccessBlockOutput {
  """Empty Response"""
  Empty: Boolean
}

type s3_PutPublicAccessBlockOutputResponse {
  s3_PutPublicAccessBlockOutput: s3_PutPublicAccessBlockOutput!
}

input s3_QueueConfigurationDeprecatedInput {
  Events: [String]
  Id: String
  Queue: String
  Event: String
}

input s3_QueueConfigurationInput {
  Events: [String]!
  Filter: s3_NotificationConfigurationFilterInput
  Id: String
  QueueArn: String!
}

input s3_RedirectAllRequestsToInput {
  Protocol: String
  HostName: String!
}

input s3_RedirectInput {
  Protocol: String
  ReplaceKeyPrefixWith: String
  ReplaceKeyWith: String
  HostName: String
  HttpRedirectCode: String
}

input s3_ReplicationConfigurationInput {
  Role: String!
  Rules: [s3_ReplicationRuleInput]!
}

input s3_ReplicationRuleAndOperatorInput {
  Prefix: String
  Tags: [s3_TagInput]
}

input s3_ReplicationRuleFilterInput {
  Tag: s3_TagInput
  And: s3_ReplicationRuleAndOperatorInput
  Prefix: String
}

input s3_ReplicationRuleInput {
  SourceSelectionCriteria: s3_SourceSelectionCriteriaInput
  Status: String!
  DeleteMarkerReplication: s3_DeleteMarkerReplicationInput
  Destination: s3_DestinationInput!
  Filter: s3_ReplicationRuleFilterInput
  ID: String
  Prefix: String
  Priority: Int
}

input s3_RequestPaymentConfigurationInput {
  Payer: String!
}

input s3_RoutingRuleInput {
  Condition: s3_ConditionInput
  Redirect: s3_RedirectInput!
}

input s3_RuleInput {
  Prefix: String!
  Status: String!
  Transition: s3_TransitionInput
  AbortIncompleteMultipartUpload: s3_AbortIncompleteMultipartUploadInput
  Expiration: s3_LifecycleExpirationInput
  ID: String
  NoncurrentVersionExpiration: s3_NoncurrentVersionExpirationInput
  NoncurrentVersionTransition: s3_NoncurrentVersionTransitionInput
}

input s3_ServerSideEncryptionByDefaultInput {
  KMSMasterKeyID: String
  SSEAlgorithm: String!
}

input s3_ServerSideEncryptionConfigurationInput {
  Rules: [s3_ServerSideEncryptionRuleInput]!
}

input s3_ServerSideEncryptionRuleInput {
  ApplyServerSideEncryptionByDefault: s3_ServerSideEncryptionByDefaultInput
}

input s3_SourceSelectionCriteriaInput {
  SseKmsEncryptedObjects: s3_SseKmsEncryptedObjectsInput
}

type s3_SSEKMS {
  KeyId: String!
}

input s3_SseKmsEncryptedObjectsInput {
  Status: String!
}

input s3_SSEKMSInput {
  KeyId: String!
}

type s3_SSES3 {
  """Empty Response"""
  Empty: Boolean
}

input s3_SSES3Input {
  """Empty Response"""
  Empty: Boolean
}

type s3_StorageClassAnalysis {
  DataExport: s3_StorageClassAnalysisDataExport
}

type s3_StorageClassAnalysisDataExport {
  Destination: s3_AnalyticsExportDestination!
  OutputSchemaVersion: String!
}

input s3_StorageClassAnalysisDataExportInput {
  Destination: s3_AnalyticsExportDestinationInput!
  OutputSchemaVersion: String!
}

input s3_StorageClassAnalysisInput {
  DataExport: s3_StorageClassAnalysisDataExportInput
}

type s3_Tag {
  Key: String!
  Value: String!
}

input s3_TaggingInput {
  TagSet: [s3_TagInput]!
}

input s3_TagInput {
  Key: String!
  Value: String!
}

input s3_TargetGrantInput {
  Grantee: s3_GranteeInput
  Permission: String
}

input s3_TopicConfigurationDeprecatedInput {
  Event: String
  Events: [String]
  Id: String
  Topic: String
}

input s3_TopicConfigurationInput {
  TopicArn: String!
  Events: [String]!
  Filter: s3_NotificationConfigurationFilterInput
  Id: String
}

input s3_TransitionInput {
  StorageClass: String
  Date: time_TimeInput
  Days: Int
}

input s3_VersioningConfigurationInput {
  MFADelete: String
  Status: String
}

input s3_WebsiteConfigurationInput {
  ErrorDocument: s3_ErrorDocumentInput
  IndexDocument: s3_IndexDocumentInput
  RedirectAllRequestsTo: s3_RedirectAllRequestsToInput
  RoutingRules: [s3_RoutingRuleInput]
}

type time_Location {
  cacheEnd: Int
  cacheStart: Int
  cacheZone: time_zone
  name: String
  tx: [time_zoneTrans]
  zone: [time_zone]
}

input time_LocationInput {
  name: String
  zone: [time_zoneInput]
  tx: [time_zoneTransInput]
  cacheStart: Int
  cacheEnd: Int
  cacheZone: time_zoneInput
}

type time_Time {
  ext: Int
  loc: time_Location
  wall: Int
}

input time_TimeInput {
  loc: time_LocationInput
  wall: Int
  ext: Int
}

type time_zone {
  isDST: Boolean
  name: String
  offset: Int
}

input time_zoneInput {
  name: String
  offset: Int
  isDST: Boolean
}

type time_zoneTrans {
  index: Int
  isstd: Boolean
  isutc: Boolean
  when: Int
}

input time_zoneTransInput {
  index: Int
  isstd: Boolean
  isutc: Boolean
  when: Int
}

